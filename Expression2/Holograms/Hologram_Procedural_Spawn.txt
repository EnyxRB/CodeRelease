@name Holo Procedural Spawn
@persist [Models Parents Scales Positions Angles Colors Materials]:array SpawnInterval Index

if (first() | dupefinished()){
    
    #------------HOLO SPAWN SETTINGS-------------#
    SpawnInterval = 30
   #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
    
    #------------HOLO SPAWN FUNCTIONS------------#
    function void indexHolo(Model:string,Parent:entity,Scale:vector,Position:vector,Angle:angle,Color:vector,Material:string){
        Models:pushString(Model)
        Parents:pushEntity(Parent)
        Scales:pushVector(Scale)        
        Positions:pushVector(Position)
        Angles:pushAngle(Angle)
        Colors:pushVector(Color)
        Materials:pushString(Material)            
    }
    
    function void clkHoloTimer(){
        Index++
        holoCreate(Index)
        holoModel(Index,Models[Index,string])
        holoParent(Index,Parents[Index,entity])
        holoScaleUnits(Index,Scales[Index,vector])
        holoPos(Index,Positions[Index,vector])
        holoAng(Index,Angles[Index,angle])
        holoColor(Index,Colors[Index,vector])
        holoMaterial(Index,Materials[Index,string])
        
        if (Index<Models:count()){
            timer("spawnHolo",SpawnInterval)   
        }
    }
    
    timer("spawnHolo",SpawnInterval)
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#

    #-------------------HOLOS---------------------#
    #-Model,Parent,Scale,Pos,Ang,Color,Material
    #-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
    indexHolo("",entity(),vec(1),entity():toWorld(vec(0)),entity():toWorld(ang(0)),vec(0),"")
    
}

#-----------ACTUAL HOLO SPAWNING--------------#
if (clk("spawnHolo")){
    if (holoCanCreate()){clkHoloTimer()}
    else {timer("spawnHolo",SpawnInterval) }
}
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
