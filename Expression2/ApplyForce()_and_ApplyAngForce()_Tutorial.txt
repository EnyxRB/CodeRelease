@name ApplyForce() and ApplyAngForce() Tutorial
@persist Vec:vector Ang:angle
##-Start-##
if (first()) {   ##-We run these things ONLY when the E2 has just been spawned-##
    runOnTick(1)   ##-Make the E2 "refresh" every tick (66 times a second or about 15ms on most servers)-##
}
 
##-Abbreviations-##
E   = entity():isWeldedTo() ##-Define what the chip is welded to-##
O   = owner()  ##-Define who YOU are-##
Pos = O:pos()  ##-Define Where YOU are-##
 
##-Vectors-##
Goto = O:pos()+vec(0,0,100) ##-This is the vector for exactly 100 inches above your feet-##
Cur  = E:pos() ##-The current position of what the E2 is welded onto-##
 
Vec = Goto-Cur ##-This creates a local vector to tell which direction to move the plate, Its allways where you want it to be minus where it-##
##-currently is-##
 
E:applyForce((Vec + $Vec*5)*E:mass()*5) ##-Apply the necessary force relative to the objects mass. The $Vec*5 part stabilises it but you must
##-put it in the persists line at the top for it to work-##
##-I find E:mass()*5 works on most things but with smaller props you might have to adjust this-##
 
 
##-Angles-##
P = E:elevation(O:aimPos())##-This gets the elevation towards where you are looking-##
Y = E:bearing(O:aimPos())  ##-This gets you the bearing towards where you are looking-##
R = E:angles():roll()      ##-This gets you the roll angle of the prop to allow it to stay upright-##
 
Ang = -ang(P,Y,R)  ##-Composing the angle, ApplyAngForce() likes this part to be negative so you put a - infront of it-##
 
E:applyAngForce((Ang + $Ang*5)*E:mass()*5) ##-Apply The necessary angular force relative to the objects mass. Again the $Ang*5 part stabilises it-##
##-Again, you may find it necessary to change the multiplier-##
