@name Dot Guard
@inputs 
@outputs 
@persist GuardDir:vector SearchRadius
@trigger 

interval(60)

if (first()){
    
SearchRadius = 150   

H = holoCreate(1)
G = holoCreate(2)
holoCreate(3) holoCreate(4) holoScale(3,vec(0.2)) holoScale(4,vec(0.2)) holoColor(3,vec(255,0,0)) holoColor(4,vec(255,0,0))
holoColor(2,vec(0,0,255)) holoColor(1,vec(0,255,0))

holoCreate(5)
holoModel(5,"models/sprops/geometry/hdisc_60.mdl")
holoAng(5,holoEntity(2):angles()+ang(0,90,90))
holoPos(5,holoEntity(2):pos()+holoEntity(2):forward()*SearchRadius/2)
holoParent(5,holoEntity(2))
holoScale(5,vec(SearchRadius/30,0.1,SearchRadius/30))
holoColor(5,vec(0,255,0))
holoAlpha(5,100)

holoPos(1,holoEntity(1):pos())
holoAng(1,vec(2,1,0):toAngle())

GuardDir = vec(9,5,0):normalized()
holoPos(2,entity():pos()+vec(100,4,0))
holoAng(2,GuardDir:toAngle())

holoPos(3,holoEntity(1):pos()+holoEntity(1):forward()*6)
holoPos(4,holoEntity(2):pos()+holoEntity(2):forward()*6)

holoParent(3,holoEntity(1)) holoParent(4,holoEntity(2))

}

holoPos(1,holoEntity(1):pos()+holoEntity(1):forward()*3)

V = holoEntity(1):pos()-holoEntity(2):pos()
VNorm = V:normalized()

Dot = GuardDir:dot(VNorm)
Angle = acos(GuardDir:dot(VNorm))

if (Dot>0 & (V:length()<SearchRadius)) {holoColor(5,vec(0,255,0))} else {holoColor(5,vec(255,0,0))}
